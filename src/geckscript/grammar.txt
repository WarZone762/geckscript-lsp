GRAMMAR
// TODO: document full grammar

literal:
  NUMBER | STRING

variable:
  ID

keyword:
  KEYWORD

variable_declaration:
  TYPE variable

variable_or_variable_declaration:
  variable | variable_declaration

function:
  FUNCTION (shift_expression ','?)*

lambda:
  '{' variable_or_variable_declaration* '}' '=>' expression |
  'begin' BLOCK_TYPE_FUNCTION '{' variable_or_variable_declaration* '}' '\n'
    block
  'end'

primary_expression:
  literal | variable | function | '(' (expression | lambda) ')'

member_expression:
  primary_expression |
  member_expression '[' expression ']' |
  member_expression '->' (ID | STRING | NUMBER | FUNCTION) |
  member_expression '.' (ID | FUNCTION)

logical_not_expression:
  member_expression |
  '!' logical_not_expression

unary_expression:
  logical_not_expression |
  ('-' | '$' | '#' | '*' | '&') unary_expression

exponential_expression:
  unary_expression ('^' unary_expression)*

multiplicative_expression:
  exponential_expression (('*' | '/' | '%') exponential_expression)*

additive_expression:
  multiplicative_expression (('+' | '-') multiplicative_expression)*

shift_expression:
  additive_expression (('<<' | '>>') additive_expression)*

and_expression:
  shift_expression ('&' shift_expression)*

or_expression:
  and_expression ('|' and_expression)*

relational_expression:
  or_expression (('>' | '>=' | '<' | '<=') or_expression)*

equality_expression:
  relational_expression (('==' | '!=') relational_expression)*

slice_make_pair_expression:
  equality_expression ((':' | '::') equality_expression)*

logical_and_expression:
  slice_make_pair_expression ((
    '&&'
  ) slice_make_pair_expression)*

logical_or_expression:
  logical_and_expression ('||' logical_and_expression)*

assignment_expression:
  logical_or_expression ((':=' | '=') logical_or_expression)*

expression:
  assignment_expression

assignment_set:
  'set' variable 'to' logical_or_expression

assignment_let:
  'let' assignment_expression

statement:
  (COMMENT |
   assignment_set |
   assignment_let |
   while_block |
   foreach_block |
   if_block |
   variable_declaration_statement |
   expression) ('\n' | EOF)

block:
  statement*

variable_declaration_statement:
  variable_declaration ((
    '=' |
    ':=' |
    '+=" |
    '-=' |
    '*=' |
    '/=' |
    '^=' |
    '|=' |
    '&=' |
    '%='
    ) expression)?

block_type:
  BLOCK_TYPE primary_expression*

begin_block:
  'begin' block_type '\n'
    block
  'end'

if_block:
  'if' expression '\n'
    block
  ('elseif' expression '\n'
      block)*
  ('else' '\n'
    block)?
  'endif'

while_block:
  'while' expression '\n'
    block
  'loop'

foreach_block:
  'foreach' variable_or_variable_declaration '<-' expression '\n'
    block
  'loop'

script_compound_statement:
  (
    assignment_set |
    assignment_let |
    variable_declaration_statement |
    begin_block
  )*

script:
  ('scriptname' | 'scn') ID '\n'
  script_compound_statement

GRAMMAR

  literal:
    NUMBER | STRING

  variable:
    ID

  function:
    FUNCTION pair_expression*

  primary_expression:
    literal | variable | function | (LPAREN | LBRACKET) expression (RPAREN | RBRACKET)

  mul_expression:
    primary_expression ((MUL | DIV | MOD) primary_expression)*

  sum_expression:
    mul_expression ((PLUS | MINUS) mul_expression)*

  comp_expression:
    sum_expression ((EQUALS_EQUALS | NOT_EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS) sum_expression)*

  pair_expression:
    comp_expression (COLON_COLON comp_expression)*

  and_expression:
    pair_expression (AND pair_expression)*

  or_expression:
    and_expression (OR and_expression)*

  assignment_expression:
    or_expression

  expression:
     assignment_expression

  variable_declaration:
    TYPE assignment_expression

  assignment_set:
    SET variable TO or_expression

  assignment_let:
    let (variable_declaration | assignment_expression)

  block_type:
    BLOCK_TYPE primary_expression*

  statement:
    COMMENT |
    assignment_set |
    assignment_let |
    begin_block |
    while_block |
    foreach_block |
    if_block |
    variable_declaration |
    expression

  compound_statement:
    statement*

  begin_block:
    BEGIN block_type
      compound_statement
    END

  if_block:
    IF expression
      compound_statement
    (ELSEIF expression
        compound_statement)*
    (ELSE
      compound_statement)?
    ENDIF

  while_block:
    WHILE expression
      compound_statement
    LOOP

  foreach_block:
    FOREACH (variable | variable_declaration) LARROW expression
      compound_statement
    LOOP

  script:
    SCRIPTNAME ID
    compound_statement

GRAMMAR

  literal:
    NUMBER | STRING

  variable:
    ID

  primary_expression:
    literal | variable | (LPAREN | LBRACKET) expression (RPAREN | RBRACKET)

  variable_declaration:
    TYPE variable

  assignment_statement:
    SET variable TO expression
    |
    LET? (variable | variable_declaration) (EQUALS | COLON_EQUALS) expression

  block_type:
    BLOCK_TYPE expression*

  comp_expression:
    primary_expression ((EQUALS_EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS) primary_expression)*

  and_expression:
    comp_expression (AND comp_expression)*

  or_expression:
    and_expression (OR and_expression)*

  mul_expression:
    or_expression ((MUL | DIV | MOD) mul_expression)*

  sum_expression:
    mul_expression ((PLUS | MINUS) mul_expression)*

  function:
    FUNCTION sum_expression*

  expression:
     function | sum_expression

  statement:
    (expression |
     variable_declaration |
     assignment_statement |
     begin_block |
     if_block |
     while_block |
     foreach_block)?

  statement_list:
    statement
    |
    statement
    statement_list

  begin_block:
    BEGIN block_type?
      statement_list
    END

  if_block:
    IF expression
      statement_list
    (ELSEIF expression
        statement_list)*
    (ELSE
      statement_list)?
    ENDIF

  while_block:
    WHILE expression
      statement_list
    LOOP

  foreach_block:
    FOREACH (variable | variable_declaration) LARROW expression
      statement_list
    LOOP

  script:
    SCRIPTNAME ID
    statement_list
